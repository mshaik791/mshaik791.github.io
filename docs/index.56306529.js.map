{"mappings":"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","sources":["<anon>","assets/js/shaded3dImage.js","assets/shaders/vertex.glsl","assets/shaders/fragment.glsl"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire2041\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire2041\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $45OZf = parcelRequire(\"45OZf\");\n\nvar $6voMz = parcelRequire(\"6voMz\");\nvar $48c83d38b59e6229$exports = {};\n$48c83d38b59e6229$exports = \"#define GLSLIFY 1\\nuniform sampler2D uTexture;\\nuniform vec2 uOffset;\\nvarying vec2 vUv;\\n\\nfloat M_PI = 3.141529;\\n\\nvec3 deformationCurve(vec3 position, vec2 uv, vec2 offset){\\n    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\\n    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\\n    return position;\\n}\\n\\nvoid main(){\\n    vUv = uv;\\n    vec3 newPosition = deformationCurve(position, uv, uOffset);\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0) * 0.9;\\n}\";\n\n\nvar $f08b6e2853e415b8$exports = {};\n$f08b6e2853e415b8$exports = \"#define GLSLIFY 1\\nuniform sampler2D uTexture;\\nuniform float uAlpha;\\nuniform vec2 uOffset;\\nvarying vec2 vUv;\\n\\nvec3 rgbShift(sampler2D textureimage, vec2 uv, vec2 offset ){\\n    float r = texture2D(textureimage, uv + offset).r;\\n    vec2 gb = texture2D(textureimage, uv).gb;\\n    return vec3(r, gb);\\n}\\n\\nvoid main(){\\n    // vec3 color = texture2D(uTexture, vUv).rgb;\\n    vec3 color = rgbShift(uTexture, vUv, uOffset);\\n    gl_FragColor = vec4(color, uAlpha);\\n}\\n\";\n\n\nconst $ec915aa7a2cb3551$var$loader = new $45OZf.TextureLoader();\nconst $ec915aa7a2cb3551$var$texture1 = $ec915aa7a2cb3551$var$loader.load((0, $6voMz.default).me1);\nconst $ec915aa7a2cb3551$var$texture2 = $ec915aa7a2cb3551$var$loader.load((0, $6voMz.default).me2);\nconst $ec915aa7a2cb3551$var$texture3 = $ec915aa7a2cb3551$var$loader.load((0, $6voMz.default).me3);\nconst $ec915aa7a2cb3551$var$texture4 = $ec915aa7a2cb3551$var$loader.load((0, $6voMz.default).me4);\nconst $ec915aa7a2cb3551$var$texture5 = $ec915aa7a2cb3551$var$loader.load((0, $6voMz.default).me5);\nconst $ec915aa7a2cb3551$var$texture6 = $ec915aa7a2cb3551$var$loader.load((0, $6voMz.default).me6);\nfunction $ec915aa7a2cb3551$var$lerp(start, end, t) {\n    return start * (1 - t) + end * t;\n}\nclass $ec915aa7a2cb3551$var$Shaded {\n    constructor(){\n        this.container = document.querySelector(\".landing\");\n        this.inner = document.querySelector(\".intro\");\n        this.links = [\n            ...document.querySelectorAll(\"#shadedimg\")\n        ];\n        this.targetX = 0;\n        this.targetY = 0;\n        this.scene = new $45OZf.Scene();\n        this.perspective = 1000;\n        this.sizes = new $45OZf.Vector2(0, 0);\n        this.offset = new $45OZf.Vector2(0, 0);\n        this.uniforms = {\n            uTexture: {\n                value: $ec915aa7a2cb3551$var$texture1\n            },\n            uAlpha: {\n                value: 0.0\n            },\n            uOffset: {\n                value: new $45OZf.Vector2(0.0, 0.0)\n            },\n            transparent: true\n        };\n        this.links.map((link, i)=>{\n            link.addEventListener(\"mouseenter\", ()=>{\n                switch(i){\n                    case 0:\n                        this.uniforms.uTexture.value = $ec915aa7a2cb3551$var$texture1;\n                        break;\n                    case 1:\n                        this.uniforms.uTexture.value = $ec915aa7a2cb3551$var$texture2;\n                        break;\n                    case 2:\n                        this.uniforms.uTexture.value = $ec915aa7a2cb3551$var$texture3;\n                        break;\n                    case 3:\n                        this.uniforms.uTexture.value = $ec915aa7a2cb3551$var$texture4;\n                        break;\n                    case 4:\n                        this.uniforms.uTexture.value = $ec915aa7a2cb3551$var$texture5;\n                        break;\n                    case 5:\n                        this.uniforms.uTexture.value = $ec915aa7a2cb3551$var$texture6;\n                        break;\n                }\n            });\n            link.addEventListener(\"mouseleave\", ()=>{\n                this.uniforms.uAlpha.value = $ec915aa7a2cb3551$var$lerp(this.uniforms.uAlpha.value, 0.0, 0.1);\n            });\n        });\n        this.checkHovered();\n        this.setupCamera();\n        this.followMouseMove();\n        this.createMesh();\n        this.render();\n    }\n    get viewport() {\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n        let aspectRatio = width / height;\n        let pixelRatio = window.devicePixelRatio;\n        return {\n            width: width,\n            height: height,\n            aspectRatio: aspectRatio,\n            pixelRatio: pixelRatio\n        };\n    }\n    checkHovered() {\n        this.inner.addEventListener(\"mouseenter\", ()=>{\n            this.hovered = true;\n        });\n        this.inner.addEventListener(\"mouseleave\", ()=>{\n            this.hovered = false;\n            this.uniforms.uTexture = {\n                value: $ec915aa7a2cb3551$var$texture1\n            };\n        });\n    }\n    setupCamera() {\n        window.addEventListener(\"resize\", this.onResize.bind(this));\n        let fov = 180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective)) / Math.PI;\n        this.camera = new $45OZf.PerspectiveCamera(fov, this.viewport.aspectRatio, 0.1, 1000);\n        this.camera.position.set(0, 0, this.perspective);\n        //renderer\n        this.renderer = new $45OZf.WebGL1Renderer({\n            antialias: true,\n            alpha: true\n        });\n        this.renderer.setSize(this.viewport.width, this.viewport.height);\n        this.renderer.setPixelRatio(this.viewport.pixelRatio);\n        this.container.appendChild(this.renderer.domElement);\n    }\n    createMesh() {\n        this.geometry = new $45OZf.PlaneGeometry(1, 1, 20, 20);\n        this.material = new $45OZf.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: (0, (/*@__PURE__*/$parcel$interopDefault($48c83d38b59e6229$exports))),\n            fragmentShader: (0, (/*@__PURE__*/$parcel$interopDefault($f08b6e2853e415b8$exports))),\n            transparent: true\n        });\n        this.mesh = new $45OZf.Mesh(this.geometry, this.material);\n        this.sizes.set(370, 470, 1);\n        this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n        this.mesh.position.set(this.offset.x, this.offset.y, 0);\n        this.scene.add(this.mesh);\n    }\n    followMouseMove() {\n        window.addEventListener(\"mousemove\", (e)=>{\n            this.targetX = e.clientX;\n            this.targetY = e.clientY;\n        });\n    }\n    onResize() {\n        this.camera.aspect = this.viewport.aspectRatio;\n        let fov = 180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective)) / Math.PI;\n        this.renderer.setSize(this.viewport.width, this.viewport.height);\n        this.camera.updateProjectionMatrix();\n    }\n    render() {\n        this.offset.x = $ec915aa7a2cb3551$var$lerp(this.offset.x, this.targetX, 0.1);\n        this.offset.y = $ec915aa7a2cb3551$var$lerp(this.offset.y, this.targetY, 0.1);\n        this.uniforms.uOffset.value.set((this.targetX - this.offset.x) * 0.0006, -(this.targetY - this.offset.y) * 0.0006);\n        this.mesh.position.set(this.offset.x - window.innerWidth / 2, -this.offset.y + window.innerHeight / 2);\n        this.hovered ? this.uniforms.uAlpha.value = $ec915aa7a2cb3551$var$lerp(this.uniforms.uAlpha.value, 1.0, 0.1) : this.uniforms.uAlpha.value = $ec915aa7a2cb3551$var$lerp(this.uniforms.uAlpha.value, 0.0, 0.1);\n        this.renderer.render(this.scene, this.camera);\n        window.requestAnimationFrame(this.render.bind(this));\n    }\n}\nnew $ec915aa7a2cb3551$var$Shaded();\n\n\n//# sourceMappingURL=index.56306529.js.map\n","import * as THREE from \"three\";\nimport images from './images'\nconst loader = new THREE.TextureLoader();\nimport vertex from '../shaders/vertex.glsl'\nimport fragment from '../shaders/fragment.glsl'\n\n\nconst texture1 = loader.load(images.me1);\nconst texture2 = loader.load(images.me2);\nconst texture3 = loader.load(images.me3);\nconst texture4 = loader.load(images.me4);\nconst texture5 = loader.load(images.me5);\nconst texture6 = loader.load(images.me6);\n\nfunction lerp(start, end, t){\n    return start * (1 - t) + end * t;\n}\n\nclass Shaded {\n    constructor(){\n        this.container = document.querySelector(\".landing\");\n        this.inner = document.querySelector(\".intro\");\n        this.links = [...document.querySelectorAll(\"#shadedimg\")];\n        this.targetX = 0;\n        this.targetY =0;\n        this.scene = new THREE.Scene();\n        this.perspective = 1000;\n        this.sizes = new THREE.Vector2(0,0);\n        this.offset = new THREE.Vector2(0,0);\n        this.uniforms = {\n            uTexture:{ value: texture1},\n            uAlpha: {value : 0.0},\n            uOffset: {value: new THREE.Vector2(0.0,0.0)},\n            transparent: true,\n        };\n        this.links.map((link, i) => {\n            link.addEventListener(\"mouseenter\", () => {\n                switch(i) {\n                    case 0:\n                        this.uniforms.uTexture.value = texture1;\n                        break;\n                    case 1:\n                        this.uniforms.uTexture.value = texture2;\n                        break;\n                    case 2:\n                        this.uniforms.uTexture.value = texture3;\n                        break;\n                    case 3:\n                        this.uniforms.uTexture.value = texture4;\n                        break;\n                    case 4:\n                        this.uniforms.uTexture.value = texture5;\n                        break;\n                    case 5:\n                        this.uniforms.uTexture.value = texture6;\n                        break;\n                }\n            });\n            link.addEventListener(\"mouseleave\", ()=> {\n                this.uniforms.uAlpha.value = lerp(this.uniforms.uAlpha.value,0.0, 0.1);\n            });\n        });\n\n        this.checkHovered();\n        this.setupCamera();\n        this.followMouseMove();\n        this.createMesh();\n        this.render();\n    }\n\n    get viewport() {\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n        let aspectRatio = width/height;\n        let pixelRatio = window.devicePixelRatio;\n        return {\n            width,\n            height,\n            aspectRatio,\n            pixelRatio,\n        };\n    }\n    checkHovered(){\n        \n        this.inner.addEventListener(\"mouseenter\", () => {\n            this.hovered = true;\n        });\n\n        this.inner.addEventListener(\"mouseleave\", ()=>{\n            this.hovered = false;\n            this.uniforms.uTexture = {value: texture1};\n        });\n\n\n    }\n    setupCamera(){\n        window.addEventListener(\"resize\", this.onResize.bind(this));\n        let fov = \n            (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) /\n            Math.PI;\n\n        this.camera = new THREE.PerspectiveCamera(\n            fov, \n            this.viewport.aspectRatio,\n            0.1, \n            1000\n        );\n        this.camera.position.set(0,0, this.perspective);\n\n\n        //renderer\n        this.renderer = new THREE.WebGL1Renderer  ({\n            antialias: true,\n            alpha: true,\n        });\n        this.renderer.setSize(this.viewport.width, this.viewport.height);\n        this.renderer.setPixelRatio(this.viewport.pixelRatio);\n        this.container.appendChild(this.renderer.domElement);\n    }\n\n    createMesh() {\n        this.geometry = new THREE.PlaneGeometry(1,1,20,20);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: vertex,\n            fragmentShader: fragment,\n            transparent: true,\n        });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.sizes.set(370, 470, 1);\n        this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n        this.mesh.position.set(this.offset.x, this.offset.y, 0);\n        this.scene.add(this.mesh);\n    }\n    followMouseMove(){\n        window.addEventListener(\"mousemove\", (e) => {\n            this.targetX = e.clientX;\n            this.targetY = e.clientY;\n        });\n\n    }\n    onResize(){\n        this.camera.aspect =this.viewport.aspectRatio;\n        let fov = \n            (180 * (2 * Math.atan(this.viewport.height / 2 / this.perspective))) /\n            Math.PI;\n        this.renderer.setSize(this.viewport.width, this.viewport.height);\n        this.camera.updateProjectionMatrix();\n    }\n\n    render(){\n        this.offset.x = lerp(this.offset.x, this.targetX, 0.1);\n        this.offset.y = lerp(this.offset.y, this.targetY, 0.1);\n        this.uniforms.uOffset.value.set(\n            (this.targetX - this.offset.x) * 0.0006,\n            -(this.targetY - this.offset.y) * 0.0006\n        );\n        this.mesh.position.set(\n            this.offset.x - window.innerWidth /2,\n            - this.offset.y + window.innerHeight / 2\n        );\n\n        this.hovered \n            ? (this.uniforms.uAlpha.value=lerp(\n                this.uniforms.uAlpha.value, \n                1.0, \n                0.1\n            )) \n            : (this.uniforms.uAlpha.value = lerp(\n                this.uniforms.uAlpha.value,\n                0.0,\n                0.1\n            ));\n\n        this.renderer.render(this.scene, this.camera);\n        window.requestAnimationFrame(this.render.bind(this));\n\n    }\n}\n\nnew Shaded();\n","uniform sampler2D uTexture;\r\nuniform vec2 uOffset;\r\nvarying vec2 vUv;\r\n\r\nfloat M_PI = 3.141529;\r\n\r\nvec3 deformationCurve(vec3 position, vec2 uv, vec2 offset){\r\n    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\r\n    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\r\n    return position;\r\n}\r\n\r\nvoid main(){\r\n    vUv = uv;\r\n    vec3 newPosition = deformationCurve(position, uv, uOffset);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0) * 0.9;\r\n}","uniform sampler2D uTexture;\r\nuniform float uAlpha;\r\nuniform vec2 uOffset;\r\nvarying vec2 vUv;\r\n\r\nvec3 rgbShift(sampler2D textureimage, vec2 uv, vec2 offset ){\r\n    float r = texture2D(textureimage, uv + offset).r;\r\n    vec2 gb = texture2D(textureimage, uv).gb;\r\n    return vec3(r, gb);\r\n}\r\n\r\nvoid main(){\r\n    // vec3 color = texture2D(uTexture, vUv).rgb;\r\n    vec3 color = rgbShift(uTexture, vUv, uOffset);\r\n    gl_FragColor = vec4(color, uAlpha);\r\n}\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$45OZf","$6voMz","$48c83d38b59e6229$exports","$f08b6e2853e415b8$exports","$ec915aa7a2cb3551$var$loader","TextureLoader","$ec915aa7a2cb3551$var$texture1","load","me1","$ec915aa7a2cb3551$var$texture2","me2","$ec915aa7a2cb3551$var$texture3","me3","$ec915aa7a2cb3551$var$texture4","me4","$ec915aa7a2cb3551$var$texture5","me5","$ec915aa7a2cb3551$var$texture6","me6","constructor","container","document","querySelector","inner","links","querySelectorAll","targetX","targetY","scene","Scene","perspective","sizes","Vector2","offset","uniforms","uTexture","value","uAlpha","uOffset","transparent","map","link","i","addEventListener","start","end","checkHovered","setupCamera","followMouseMove","createMesh","render","viewport","width","innerWidth","height","innerHeight","aspectRatio","pixelRatio","devicePixelRatio","hovered","onResize","bind","fov","Math","atan","PI","camera","PerspectiveCamera","position","set","renderer","WebGL1Renderer","antialias","alpha","setSize","setPixelRatio","appendChild","domElement","geometry","PlaneGeometry","material","ShaderMaterial","vertexShader","fragmentShader","mesh","Mesh","scale","x","y","add","e","clientX","clientY","aspect","updateProjectionMatrix","requestAnimationFrame"],"version":3,"file":"index.56306529.js.map"}